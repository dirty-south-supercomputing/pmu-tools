#!/bin/bash
# simple regression tester for toplev
# this just tests if all events resolve etc, as it would
# need the individual CPUs.
# for non root set kernel.perf_event_paranoid = -1

set -e

WRAP=${WRAP:-}

failed() {
	echo FAILED
	[ -f nflog ] && ( sort nflog | uniq ) && rm nflog
}
trap failed ERR 0

. ./cpumap.sh

rm -f nflog

cat >hello.c <<EOL
#include <stdio.h>
int main() {
	printf("Hello world\n");
	return 0;
}
EOL

set -x

LOAD="${LOAD:--- gcc -o /dev/null hello.c}"
LOAD0="-- taskset -c 0 $LOAD"

set -o pipefail

SMTCPUS="snb jkt ivb ivt hsw hsx bdw skl bdx knl skx clx"
NOSMTCPUS="slm simple"
ALLCPUS="$SMTCPUS $NOSMTCPUS"

if [ $(whoami) = root ] ; then
	ALL="--all"
else
	ALL="--metrics -l5 --tsx --power"
fi


checklog0() {
	grep -v unparseable log$$
}

DCPU=hsw

EVENTMAP=${cpus[$DCPU]} FORCECPU=$DCPU $WRAP ./toplev.py $LOAD

# test with a locale that outputs FP numbers with , (github issue #43)
LC_ALL=pl_PL.utf8 EVENTMAP=${cpus[$DCPU]} FORCECPU=$DCPU $WRAP ./toplev.py $LOAD

DIRECT_MSR=1 EVENTMAP=${cpus[$DCPU]} FORCECPU=$DCPU $WRAP ./toplev.py $LOAD
EVENTMAP=${cpus[$DCPU]} FORCECPU=$DCPU $WRAP ./toplev.py --no-desc -l4 $LOAD | tee log$$
checklog0
EVENTMAP=${cpus[$DCPU]} FORCECPU=$DCPU $WRAP ./toplev.py --no-desc -l4 --single-thread $LOAD | tee log$$
checklog0
EVENTMAP=${cpus[$DCPU]} FORCECPU=$DCPU $WRAP ./toplev.py --no-desc -l4 --single-thread --columns $LOAD | tee log
checklog0
EVENTMAP=${cpus[$DCPU]} FORCECPU=$DCPU $WRAP ./toplev.py --no-desc --all --core S0-C0-T0 $LOAD0 | tee log
checklog0
EVENTMAP=${cpus[$DCPU]} FORCECPU=$DCPU $WRAP ./toplev.py --no-desc -v -l4 $LOAD | tee log
checklog0
EVENTMAP=${cpus[$DCPU]} FORCECPU=$DCPU $WRAP ./toplev.py --no-desc -x, -v -l4 $LOAD | tee log
checklog0
# temporarily disabled because perf has a regression that causes segfaults with -r
#EVENTMAP=${cpus[$DCPU]} FORCECPU=$DCPU $WRAP ./toplev.py --no-desc -r2 -l4 $LOAD
KERNEL_VERSION=2.1 EVENTMAP=${cpus[$DCPU]} FORCECPU=$DCPU $WRAP ./toplev.py --no-desc --all $LOAD | tee log$$
checklog0
EVENTMAP=${cpus[$DCPU]} FORCECPU=$DCPU $WRAP ./toplev.py --no-desc --metrics -x, -v -l4 $LOAD | tee log$$
checklog0
EVENTMAP=${cpus[$DCPU]} FORCECPU=$DCPU $WRAP ./toplev.py -g --raw -v --debug --stats $ALL --kernel $LOAD | tee log$$
checklog0
EVENTMAP=${cpus[$DCPU]} FORCECPU=$DCPU $WRAP ./toplev.py --no-desc --stats $ALL --kernel --valcsv val.csv --no-multiplex $LOAD | tee log$$
checklog0
grep :k log$$
grep /k log$$
EVENTMAP=${cpus[$DCPU]} FORCECPU=simple $WRAP ./toplev.py --no-desc -l1 $LOAD
# check errata handling
EVENTMAP=GenuineIntel-6-56 FORCECPU=bdw $WRAP ./toplev.py --handle-errata --force-events --no-desc --all $LOAD | tee log
grep BDE70 log

# test L1 uses a single group
onegroup() {
	if [ `cat /proc/sys/kernel/nmi_watchdog` = 1 ] ; then return ; fi
	grep perf $1 | tr -cd '{}' | awk ' { if ($1 != "{}") { print "more than one group for L1" ; exit(1); } } '
}

badschedules=0
badschedlist=""

checklog() {
	grep -v unparseable $1
	if grep "not supported 100.00%" $1 ; then
		echo "WARNING unsupported schedule in $1"
		badschedules=$[$badschedules + 1]
		badschedlist="$badschedlist $1"
	fi
}

for j in $SMTCPUS ; do
if ! grep -q hypervisor /proc/cpuinfo ; then
TOPOLOGY=topology EVENTMAP=${cpus[$j]} UNCORE=${cpus[$j]} FORCEHT=1 FORCECPU=$j $WRAP ./toplev.py --force-events -l1 --filterquals $LOAD 2>&1 | tee log.$j
[ $j != "knl" ] && onegroup log.$j
checklog log.$j
egrep "not found|missing" log.$j >> nflog || true
fi
TOPOLOGY=topology EVENTMAP=${cpus[$j]} UNCORE=${cpus[$j]} FORCEHT=0 FORCECPU=$j $WRAP ./toplev.py --force-events -l1 --filterquals $LOAD 2>&1 | tee log.$j
[ $j != "knl" ] && onegroup log.$j
egrep "not found|missing" log.$j >> nflog || true
if ! grep -q hypervisor /proc/cpuinfo ; then
TOPOLOGY=topology EVENTMAP=${cpus[$j]} UNCORE=${cpus[$j]} FORCEHT=1 FORCECPU=$j $WRAP ./toplev.py --force-events $ALL --filterquals $LOAD 2>&1 | tee log.$j
checklog log.$j
fi
TOPOLOGY=topology EVENTMAP=${cpus[$j]} FORCEHT=0 FORCECPU=$j $WRAP ./toplev.py --force-events --filterquals $ALL $LOAD 2>&1 | tee log.$j
TOPOLOGY=topology EVENTMAP=${cpus[$j]} FORCEHT=1 FORCECPU=$j FORCE_NMI_WATCHDOG=1 \
$WRAP ./toplev.py --force-events --filterquals $ALL $LOAD 2>&1 | tee log.$j
TOPOLOGY=topology EVENTMAP=${cpus[$j]} UNCORE=${cpus[$j]} FORCEHT=0 FORCECPU=$j \
$WRAP ./toplev.py --force-events $ALL --filterquals $LOAD 2>&1 | tee log.$j
checklog log.$j
egrep "not found|missing" log.$j >> nflog || true
done

for j in $NOSMTCPUS ; do
EVENTMAP=${cpus[$j]} FORCECPU=$j $WRAP ./toplev.py -l1 $LOAD 2>&1 | tee log.$j
# SLM now needs two groups
[ $j != "slm" ] && onegroup log.$j
checklog log.$j
EVENTMAP=${cpus[$j]} FORCECPU=$j $WRAP ./toplev.py $ALL $LOAD 2>&1 | tee log.$j
checklog log.$j
egrep "not found|missing" log.$j >> nflog || true
done

# misc features
EVENTMAP=${cpus[hsw]} FORCECPU=hsw $WRAP ./toplev.py -o log$$ --ignore-errata --stats --metrics --force-events --no-multiplex -l4 $LOAD
grep Turbo_Utilization log$$
rm log$$
EVENTMAP=${cpus[hsw]} FORCECPU=hsw $WRAP ./toplev.py --all --fast $LOAD
EVENTMAP=${cpus[hsw]} FORCECPU=hsw $WRAP ./toplev.py --perf-output x$$.csv --all $LOAD
EVENTMAP=${cpus[hsw]} FORCECPU=hsw $WRAP ./toplev.py --import x$$.csv --all
rm x$$.csv
EVENTMAP=${cpus[hsw]} FORCECPU=hsw $WRAP ./toplev.py --stats --metrics --no-multiplex --columns -l4 $LOAD
EVENTMAP=${cpus[hsw]} FORCECPU=hsw $WRAP ./toplev.py --stats --metrics --per-core --columns -l4 $LOAD
EVENTMAP=${cpus[hsw]} FORCECPU=hsw $WRAP ./toplev.py --stats --metrics --per-socket --columns -l4 $LOAD
EVENTMAP=${cpus[hsw]} FORCECPU=hsw $WRAP ./toplev.py --stats --metrics --per-thread --columns -l4 $LOAD
EVENTMAP=${cpus[hsw]} FORCECPU=hsw $WRAP ./toplev.py --stats --metrics --per-thread -x, --columns -l4 $LOAD
EVENTMAP=${cpus[hsw]} FORCECPU=hsw FORCEHT=0 $WRAP ./toplev.py --stats --metrics --global -x, --columns -l4 $LOAD
EVENTMAP=${cpus[hsw]} FORCECPU=hsw FORCEHT=1 $WRAP ./toplev.py --stats --metrics --global -x, --columns -l4 $LOAD
EVENTMAP=${cpus[skl]} FORCECPU=skl $WRAP ./toplev.py --stats --metrics  --per-thread --per-core --per-socket --summary -a -l4 --filterquals $LOAD
EVENTMAP=${cpus[skl]} FORCECPU=skl $WRAP ./toplev.py --stats --split-output -o out$$ --metrics  --per-thread --per-core --per-socket --global --summary --filterquals -x, -a -l4 $LOAD
EVENTMAP=${cpus[skl]} FORCECPU=skl $WRAP ./toplev.py --stats --metrics  --per-thread --per-core --per-socket --global --summary --filterquals -x, -a -l4 $LOAD
EVENTMAP=${cpus[skl]} FORCECPU=skl FORCEHT=0 $WRAP ./toplev.py --stats --split-output -o out$$ --metrics  --per-thread --per-core --per-socket --global --summary --columns --filterquals -x, -a -l4 $LOAD
EVENTMAP=${cpus[skl]} FORCECPU=skl FORCEHT=0 $WRAP ./toplev.py --stats --metrics  --per-thread --per-core --per-socket --global --summary --columns --filterquals -x, -a -l4 $LOAD
EVENTMAP=${cpus[skl]} FORCECPU=skl FORCEHT=1 $WRAP ./toplev.py --stats --split-output -o out$$ --metrics  --per-thread --per-core --per-socket --global --summary --filterquals --columns -x, -a -l4 $LOAD
EVENTMAP=${cpus[skl]} FORCECPU=skl FORCEHT=1 $WRAP ./toplev.py --stats --metrics  --per-thread --per-core --per-socket --global --summary --filterquals --columns -x, -a -l4 $LOAD
rm out$$-*
EVENTMAP=${cpus[skl]} FORCECPU=skl $WRAP ./toplev.py --all --single-thread  --per-thread --per-core --per-socket --filterquals --summary -a -l4 $LOAD
EVENTMAP=${cpus[hsw]} FORCECPU=hsw $WRAP ./toplev.py --no-desc --power -l4 $LOAD
EVENTMAP=${cpus[hsw]} FORCECPU=hsw $WRAP ./toplev.py --no-desc $ALL --no-group $LOAD
EVENTMAP=${cpus[hsw]} FORCECPU=hsw $WRAP ./toplev.py --no-desc --sw -l4 $LOAD
EVENTMAP=${cpus[skl]} FORCECPU=skl $WRAP ./toplev.py --single-thread --user $LOAD | tee log$$
onegroup log$$
grep :u log$$
grep /u log$$
EVENTMAP=${cpus[hsw]} FORCECPU=hsw $WRAP ./toplev.py --list-all
EVENTMAP=${cpus[hsw]} FORCECPU=hsw $WRAP ./toplev.py --metric-group +TopDownL1,TLB $LOAD
if python -c 'import matplotlib.pyplot' ; then
EVENTMAP=${cpus[hsw]} FORCECPU=hsw $WRAP ./toplev.py --graph -o x.png --metrics -l4 $LOAD
fi
EVENTMAP=${cpus[ivb]} FORCECPU=ivb $WRAP ./toplev.py -l4 -I 100 sleep 1
EVENTMAP=${cpus[ivb]} FORCECPU=ivb $WRAP ./toplev.py -o log$$ -m -l4 -I 100 $LOAD
grep IPC log$$
checklog0
rm log$$
EVENTMAP=${cpus[ivb]} FORCECPU=ivb $WRAP ./toplev.py -l4 -I 100 --columns sleep 1
EVENTMAP=${cpus[ivb]} FORCECPU=ivb $WRAP ./toplev.py -l4 -I 100 --columns -x, sleep 1
EVENTMAP=${cpus[skl]} FORCECPU=ivb $WRAP ./toplev.py --all --valcsv val.csv $LOAD | tee log$$
EVENTMAP=${cpus[skl]} FORCECPU=ivb $WRAP ./toplev.py --all --valcsv val.csv --user $LOAD | tee log$$
grep :u log$$
grep /u log$$
rm log$$
rm val.csv
EVENTMAP=${cpus[hsw]} FORCECPU=hsw $WRAP ./toplev.py --all --sample-repeat 5 --filterqual -a sleep 0.1  | tee log
# do all perf.data exist?
rm perf.data.{1,2,3,4,5}

EVENTMAP=${cpus[skl]} FORCECPU=skl $WRAP ./toplev.py -o log$$ --single-thread -r3 $LOAD
grep '\+-.*[0-9][1-9]' log$$

rm log$$

# test other perf output formats
EVENTMAP=${cpus[snb]} FORCEHT=1 FORCECPU=hsw $WRAP ./toplev.py -o log$$ -mvl5 -I 1000 -a --per-core sleep 1
checklog0
EVENTMAP=${cpus[snb]} FORCEHT=0 FORCECPU=snb $WRAP ./toplev.py -o log$$ -l4 -I 1000 -a --per-core sleep 1
checklog0
EVENTMAP=${cpus[snb]} FORCEHT=0 FORCECPU=snb $WRAP ./toplev.py -o log$$ -l4 -I 1000 -a --per-socket sleep 1
checklog0
EVENTMAP=${cpus[skl]} FORCEHT=1 FORCECPU=skl $WRAP ./toplev.py -o log$$ -l4 -I 1000 -a --per-socket sleep 1
checklog0
EVENTMAP=${cpus[snb]} FORCEHT=0 FORCECPU=snb $WRAP ./toplev.py -o log$$ --no-desc -l4 -I 1000 -a -A sleep 1
checklog0
EVENTMAP=${cpus[snb]} FORCEHT=0 FORCECPU=snb $WRAP ./toplev.py -o log$$ --summary --no-desc --no-area -l4 -I 1000 -a -A sleep 1
checklog0
EVENTMAP=${cpus[skl]} FORCEHT=1 FORCECPU=skl $WRAP ./toplev.py -o log$$ -l4 -I 1000 -a --per-thread sleep 1
checklog0

EVENTMAP=${cpus[hsx]} FORCECPU=hsx $WRAP ./toplev.py  -l4 true

# check current platform
$WRAP ./toplev.py -o /dev/null --no-desc -v --all --run-sample $LOAD
HYPERVISOR=1 $WRAP ./toplev.py -o /dev/null --no-desc -v -l5 --run-sample $LOAD
for cpu in $SMTCPUS ; do
TOPOLOGY=topology EVENTMAP=${cpus[$cpu]} UNCORE=${cpus[$cpu]} FORCECPU=$cpu \
$WRAP ./toplev.py -o /dev/null --force-events --no-desc -v --all --filterqual --show-sample $LOAD >&log$$
cat log$$
# need to ignore errors for now to allow testing on laptop for uncore events
egrep "missing|not found" log$$ >> nflog || true
if ! grep -q hypervisor /proc/cpuinfo ; then
[ "$cpu" != knl ] && grep /p log$$
[ "$cpu" = hsw -o "$cpu" = bdw -o "$cpu" = skl ] && grep /pp log$$
fi
done
for cpu in $NOSMTCPUS ; do
EVENTMAP=${cpus[$cpu]} UNCORE=${cpus[$cpu]} FORCECPU=$cpu \
$WRAP ./toplev.py -o /dev/null --force-events --no-desc -v --all --filterqual --show-sample $LOAD >&log$$
cat log$$
egrep "not found|missing" log$$ >> nflog || true
done

trap "" ERR 0

set +x +e
echo
echo "$badschedules bad schedules: $badschedlist"
echo "SUCCEEDED"
for i in $ALLCPUS ; do rm log.$i ; done
[ -f nflog ] && ( sort nflog | uniq ) && rm nflog
